
function commandMode() 
	local command = ""
	local pos = 1
	term.setCursorPos(1, global.getVar("termY"))
	term.clearLine()
	term.write(":")

	-- TODO find better way to 'eat' event
	os.sleep(0.1)
	

	local running = true
	local event, key = os.pullEvent()
	while running do
		if event == "key" then
			if key == keys.enter then
				term.clearLine()
				running = false
				return command
			end

			-- tab is escape
			if key == keys.tab then
				term.clearLine()
				running = false
			end

			if key == keys.backspace then
				term.setCursorPos(pos, global.getVar("termY"))

				command = string.sub(command, 1, string.len(command) - 1)
				pos = pos - 1
				if pos < 1 then
					pos = 1
				end
			end
		end

		if event == "char" then
			--command[pos] = key
			command = command..key
			pos = pos + 1
			term.setCursorPos(pos, global.getVar("termY"))
			term.write(key)
		end
		event, key = os.pullEvent()
	end
end

-- line: what line number
-- column: column number
-- pos: where should insert mode be entered in realtion to the cursor
-- 		here
-- 		beginning
-- 		after
-- 		end
function insertMode(line, column, pos)
	os.sleep(0.1)

	local strBefore
	local strAfter

	-- Also have 'begining' and 'end'
	if pos == "here" then
		strBefore = string.sub(global.getLine(line), 1, column - 1)
		strAfter = string.sub(global.getLine(line), column)
	elseif pos == "after" then
		strBefore = string.sub(global.getLine(line), 1, column)
		strAfter = string.sub(global.getLine(line), column + 1)
		column = column + 1
	elseif pos == "beginning" then
		column = string.len(string.match(global.getLine(line), "%s*"))
		strBefore = string.sub(global.getLine(line), 1, column)
		column = column + 1
		strAfter = string.sub(global.getLine(line), column)
	elseif pos == "0" then
		strBefore = ""
		strAfter = global.getLine(line)
		column = 1
	elseif pos == "end" then
		strBefore = global.getLine(line)
		strAfter = ""
		column = string.len(global.getLine(line)) + 1
	elseif pos == "newline" then
		global.setVar("hasChanged", true)

		line = line + 1

		global.setVar("currentLine", line)
		global.insertLine(line, "")

		strBefore = ""
		strAfter = ""

		column = 1
		screen.redraw()
	elseif pos == "prevline" then
		global.setVar("hasChanged", true)

		global.insertLine(line + 1, global.getLine(line))
		global.setLine(line, "")

		strBefore = ""
		strAfter = ""

		column = 1
		screen.redraw()
	end

	term.setCursorPos( column, line )

	local event, key = os.pullEvent()
	while true do
		if event == "key" then

			-- tab is escape
			if key == keys.tab then
				break
			end

			-- You currently can backspace past the screen
			if key == keys.backspace then
				strBefore = string.sub(strBefore, 1, string.len(strBefore) - 1)
				column = column - 1

				term.clearLine()
				term.setCursorPos(1, line)
				term.write(strBefore..strAfter)
				global.setLine(line, strBefore..strAfter)

				term.setCursorPos(column, line)
			end

			if key == keys.delete then
				strAfter = string.sub(strAfter, 2)

				term.clearLine()
				term.setCursorPos(1, line)
				term.write(strBefore..strAfter)
				global.setLine(line, strBefore..strAfter)

				term.setCursorPos(column, line)
			end

			if key == keys.enter then
				global.setVar("hasChanged", true)

				global.setLine(line, strBefore)

				line = line + 1
				column = 1
				global.insertLine(line, strAfter)
				strBefore = ""

				global.setVar("currentLine", line)

				screen.redraw()
				term.setCursorPos(column, line)

			end
		end

		-- text entry
		if event == "char" then
			global.setVar("hasChanged", true)

			strBefore = strBefore..key
			--[[
			term.clearLine()
			term.setCursorPos(1, global.getVar("currentLine")-global.getVar("topLine")+1)
			term.write(strBefore..strAfter)
			global.setLine(line, strBefore..strAfter)

			column = column + 1
			term.setCursorPos(column, line)
			]]
			global.setLine(line, strBefore..strAfter)
			screen.redraw()
		end

		-- pull next event
		event, key = os.pullEvent()
	end

	return column, line


end

function normalMode()
	term.setCursorBlink(true)

	local cursorX, cursorY = 1, 1
	term.setCursorPos(cursorX, cursorY)

	local keyPresses = {}

	global.setVar("running", true)
	while global.getVar("running") do
		local event, key = os.pullEvent()

		if event == "char" then

			keyPresses[#keyPresses + 1] = key

			local triggered = false
			triggered, cursorX, cursorY =
				command.runViCommand( keyPresses, cursorX, cursorY )

			if triggered then
				keyPresses = {}
				term.setCursorPos(cursorX, cursorY)
			end
		end
	end
end
