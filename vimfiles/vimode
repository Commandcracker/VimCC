
function commandMode() 
	local command = ""
	local pos = 1
	term.setCursorPos(1, global.getVar("termY"))
	term.clearLine()
	term.write(":")

	-- TODO find better way to 'eat' event
	os.sleep(0.1)
	

	local running = true
	local event, key = os.pullEvent()
	while running do
		if event == "key" then
			if key == keys.enter then
				term.clearLine()
				running = false
				return command
			end
			-- tab is escape
			if key == keys.tab then
				term.clearLine()
				running = false
			end
			if key == keys.backspace then
				term.setCursorPos(pos, global.getVar("termY"))

				command = string.sub(command, 1, string.len(command) - 1)
				pos = pos - 1
				if pos < 1 then
					pos = 1
				end
			end
		end
		if event == "char" then
			--command[pos] = key
			command = command..key
			pos = pos + 1
			term.setCursorPos(pos, global.getVar("termY"))
			term.write(key)
		end
		event, key = os.pullEvent()
	end
end

-- @returns
-- cursorX, the cursor pos after edits
function insertMode(line, column, pos)
	os.sleep(0.1)

	local strBefore
	local strAfter

	-- Also have 'begining' and 'end'
	if pos == "here" then
		strBefore = string.sub(global.getLine(line), 1, column - 1)
		strAfter = string.sub(global.getLine(line), column)
	elseif pos == "after" then
		strBefore = string.sub(global.getLine(line), 1, column)
		strAfter = string.sub(global.getLine(line), column + 1)
		column = column + 1
	elseif pos == "beginning" then
		strBefore = ""
		strAfter = global.getLine(line)
		column = 1
	elseif pos == "end" then
		strBefore = global.getLine(line)
		strAfter = ""
		column = string.len(global.getLine(line)) + 1
	end

	term.setCursorPos( column, line )

	local event, key = os.pullEvent()
	while true do
		if event == "key" then
			-- tab is escape
			if key == keys.tab then
				return column
			end
			-- You currently can backspace past the screen
			if key == keys.backspace then
				strBefore = string.sub(strBefore, 1, string.len(strBefore) - 1)
				column = column - 1

				term.clearLine()
				term.setCursorPos(1, line)
				term.write(strBefore..strAfter)
				global.setLine(line, strBefore..strAfter)

				term.setCursorPos(column, line)
			end
			-- insert linebreak
			if key == keys.enter then
				global.setVar("hasChanged", true)

				global.setLine(line, strBefore)
				table.insert(lines, line + 1, strAfter)
				strAfter = ""
				global.setVar("length", global.getVar("length") + 1)

				screen.redraw()

				column = 1
				term.setCursorPos(column, line)

			end
		end
		-- text entry
		if event == "char" then
			global.setVar("hasChanged", true)

			strBefore = strBefore..key
			term.clearLine()
			term.setCursorPos(1, global.getVar("currentLine")-global.getVar("topLine")+1)
			term.write(strBefore..strAfter)
			global.setLine(line, strBefore..strAfter)

			column = column + 1
			term.setCursorPos(column, line)
		end
		event, key = os.pullEvent()
	end


end

function normalMode()
	term.setCursorBlink(true)
	-- what line vissible on the screen is selected
	local cursorX, cursorY = 1, 1
	term.setCursorPos(cursorX, cursorY)

	local running = true

	-- Keys that do something when pressed
	--
	-- Used to differentiate from those keys that act like modifiers
	local triggerKeys = {
		x = "x",
		G = "G",
		j = "j",
		k = "k",
		h = "h",
		l = "l"
	}
	local keyPresses = {}

	while running do
		local event, key, beingHeld = os.pullEventRaw()

		if event == "key" then
			-- currently sets the line jumped to as the top line
			-- TODO possible bugs
			-- allows the sceen to scroll further than usual
			-- when entering a 0Â manually, still goes to bottom
			if key == keys.g and prevKey == keys.rightShift or prevKey == keys.leftShift then
				if tonumber(numMod) == 0 or tonumber(numMod) > global.getVar("length") then
					global.setVar("currentLine", global.getVar("length"))
					topLine = global.getVar("length")
				else
					global.setVar("currentLine", tonumber(numMod))
					topLine = global.getVar("currentLine")
				end
				numMod = "0"
				screen.redraw()
			end

		end
		if event == "char" then

			keyPresses[#keyPresses + 1] = key

			if triggerKeys[key] ~= nil then
				--parse arguments before the trigger key
			end


			if key == "l" then
				-- number mods,
				-- TODO
				-- This should be better implemented
				local mod = tonumber(keyPresses[1])
				if mod ~= nil then
					cursorX = cursorX + mod
				end
			end
			if key == "h" then
				cursorX = cursorX - 1
			end
			if key == "j" then
				cursorY = cursorY + 1
				global.setVar("currentLine", global.getVar("currentLine") + 1)
				if cursorY > global.getVar("termY") - 2 then
					cursorY = global.getVar("termY") - 2
					global.setVar("topLine", global.getVar("topLine") + 1)
				end
				if cursorY > global.getVar("length") then
					cursorY = global.getVar("length")
					global.setVar("currentLine", global.getVar("length"))
				end
				if global.getVar("currentLine") > global.getVar("length") then
					global.setVar("currentLine", global.getVar("length"))
					global.setVar( global.getVar("length") )
				end
				screen.redraw()
			end
			if key == "k" then
				cursorY = cursorY - 1
				global.setVar("currentLine", global.getVar("currentLine") - 1)
				if cursorY < 1 then
					cursorY = 1
					global.setVar("topLine", global.getVar("topLine") - 1)
				end
				if global.getVar("currentLine") < 1 then
					global.setVar("currentLine", 1)
					global.setVar("topLine", 1)
				end
				screen.redraw()
			end

			if key == "x" then
				global.setVar("hasChanged", true)
				temp = global.getLine(global.getVar("currentLine"))
				a = string.sub(temp, 1, cursorX - 1)
				b = string.sub(temp, cursorX + 1, string.len(temp)) 
				global.setLine(global.getVar("currentLine"), a..b)
				screen.redraw()
			end

			if key == "i" then
				cursorX = insertMode(global.getVar("currentLine"), cursorX, "here")
			end
			if key == "I" then
				cursorX = insertMode(global.getVar("currentLine"), cursorX, "beginning")
			end
			if key == "a" then
				cursorX = insertMode(global.getVar("currentLine"), cursorX, "after")
			end
			if key == "A" then
				cursorX = insertMode(global.getVar("currentLine"), cursorX, "end")
			end

			if key == "d" then
				if keyPresses.d ~= nil then
					global.setVar("hasChanged", true)
					global.removeLine(global.getVar("currentLine"))

					screen.redraw()
				end
				keyPresses[#keyPresses + 1] = "d"
				-- temporarly make 'd' a triggr key
				triggerKeys.d = "d"
			end

			-- if the keypress triggered something
			-- then reset the pressed keys
			if triggerKeys[key] ~= nil then
				keyPresses = {}
			end

			if key == ":" then
				local command = commandMode()
				if command == "q" then
					if global.getVar("hasChanged") then
						term.setCursorPos(1, global.getVar("termY"))
						term.setBackgroundColour( colors.red )
						term.write("No write since last change, ! to override")
						term.setBackgroundColour( colors.black )
					else
						running = false
					end
				end
				if command == "q!" then
					running = false
				end
				if command == "w" then
					file.write()
				end
				if command == "wq" then
					file.write()
					running = false
				end
			end

			term.setCursorPos(cursorX, cursorY)
		end
	end
end
